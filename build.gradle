buildscript {
    ext {
        springBootVersion = '2.1.9.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id "org.asciidoctor.convert" version "1.5.9.2"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group 'com.jojoldu.book'
version '1.0.4-SNAPSHOT-'+new Date().format("yyyyMMddHHmmss")
sourceCompatibility = 1.8

repositories {
    mavenLocal()
    maven { url 'https://repo.spring.io/libs-snapshot' }
    mavenCentral()
}

dependencies {

    implementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.projectlombok:lombok')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-mustache')
    compile('com.h2database:h2')

    compile('org.springframework.boot:spring-boot-starter-oauth2-client')
    compile('org.springframework.session:spring-session-jdbc')

    compile("org.mariadb.jdbc:mariadb-java-client")

    testCompile("org.springframework.security:spring-security-test")
        // Spring REST Docs
    asciidoctor 'org.springsframework.restdocs:spring-restdocs-asciidoctor'
    compile 'org.springframework.boot:spring-boot-starter-web'
    testCompile('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'junit', module: 'junit;'
    }
    testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc'

    testCompile 'org.junit.jupiter:junit-jupiter-api'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine'
}


ext {
    snippetsDir = file('build/generated-snippets')
}

ext['spring-restdocs.version'] = '2.0.4.BUILD-SNAPSHOT'


test {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}

//bootJar {
//    dependsOn asciidoctor
//    from ("${asciidoctor.outputDir}/html5") {
//        into 'static/docs'
//    }

task copyDocument(type: Copy) {
    dependsOn asciidoctor

    from file("build/asciidoc/html5/")
    into file("src/main/resources/static/docs")
}
build {
    dependsOn copyDocument
}